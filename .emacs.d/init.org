#+TITLE: gcman105's Emacs configuration
#+OPTIONS: toc:4 h:4


* Configuration
** About this file
<<babel-init>>

Inspired by the [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]], I set up my configuration file
using Org-babel. Because my username is Sacha, I can save this as
Sacha.org in my =~/.emacs.d= directory to have it automatically load.
You could load it with =(org-babel-load-file "/path/to/file")=,
changing the path appropriately, but you'll probably want to tweak it
extensively first. 

This page: [[http://sachac.github.io/.emacs.d/Sacha.html][HTML]] - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Org]] - [[https://dl.dropbox.com/u/3968124/sacha-emacs.el][.el]] - [[http://github.com/sachac/.emacs.d/][Github]] - also, http://sach.ac/dotemacs

To be precise, this is what's in the first part of my =~/.emacs.d/init.el= (what used to be the =~/.emacs= file):

#+begin_src emacs-lisp  :tangle no
;;; init.el --- Where all the magic begins
;;
;; This file loads both
;; - Org-mode : http://orgmode.org/ and
;; - Org-babel: http://orgmode.org/worg/org-contrib/babel/org-babel.php#library-of-babel
;;
;; It then loads the rest of our Emacs initialization from Emacs lisp
;; embedded in literate Org-mode files.

;; Load up Org Mode and Org Babel for elisp embedded in Org Mode files
(setq dotfiles-dir (file-name-directory (or (buffer-file-name) load-file-name)))

;; setting el-get packaged org-mode to initial load path, should fail
;; safely to builtin org
(let* ((org-dir (expand-file-name "org" (expand-file-name "el-get" dotfiles-dir)))
       (load-path (append (list org-dir) (or load-path nil))))
  (require 'org-id)
  (require 'org-element)
  ;;TODO make bug report, this contains defcustom definitions that are needed during tangle operations... 
  (require 'org)
  (mapc #'org-babel-load-file (directory-files dotfiles-dir t "\\.org$")))

;;; init.el ends here
#+end_src

If you're new to Emacs Lisp, you probably don't want to copy and paste
large chunks of this code. Instead, copy small parts of it (always
making sure to copy a complete set of parentheses) into your
=*scratch*= buffer or some other buffer in =emacs-lisp-mode=. Use =M-x
eval-buffer= to evaluate the code and see if you like the way that
Emacs behaves. See [[https://www.gnu.org/software/emacs/manual/html_mono/eintr.html][An Introduction to Programming in Emacs Lisp]] for more details on Emacs Lisp. You can also find the manual by using =C-h i= (=info=) and choosing "Emacs Lisp Intro".

I've installed a lot of packages. See the [[*Add%20package%20sources][package sources]] section to
add the repositories to your configuration. When you see =use-package=
and a package name you might like, you can use =M-x package-install=
to install the package of that name. Note that use-package is itself
provided by a package, so you'll probably want to install that and
=bind-key=.

If you're viewing the Org file, you can open source code blocks (those are the ones in begin_src) in a separate buffer by moving your point inside them and typing C-c ' (=org-edit-special=). This opens another buffer in =emacs-lisp-mode=, so you can use =M-x eval-buffer= to load the changes. If you want to explore how functions work, use =M-x edebug-defun= to set up debugging for that function, and then call it. You can learn more about edebug in the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Emacs Lisp]] manual.

I like using =(setq ...)= more than Customize because I can neatly organize my configuration that way. 

** Personal information

#+begin_src emacs-lisp
  (setq user-full-name "Gary Cheeseman"
        user-mail-address "gary@cheeseman.me.uk")
#+end_src
