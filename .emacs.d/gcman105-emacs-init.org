#+TITLE: gcman105's Emacs configuration
#+OPTIONS: toc:4 h:4

* Configuration
  
** About this file
<<babel-init>>

Inspired by the [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua's config]], I set up my configuration file using Org-babel. This file is saved as gcman105-emacs-init.org in my =~/.emacs.d= directory to have it automatically load.

[[https://github.com/gcman105/dotfiles/blob/master/.emacs.d/gcman105-emacs-init.org][This File]] on Github

#+begin_src emacs-lisp  :tangle no
;;; init.el --- Where all the magic begins
;;
;; This file loads Org-mode and then loads the rest of our Emacs initialization from Emacs lisp
;; embedded in literate Org-mode files.

;; Load up Org Mode and (now included) Org Babel for elisp embedded in Org Mode files
(setq dotfiles-dir (file-name-directory (or (buffer-file-name) load-file-name)))

(let* ((org-dir (expand-file-name
                 "lisp" (expand-file-name
                         "org" (expand-file-name
                                "src" dotfiles-dir))))
       (org-contrib-dir (expand-file-name
                         "lisp" (expand-file-name
                                 "contrib" (expand-file-name
                                            ".." org-dir))))
       (load-path (append (list org-dir org-contrib-dir)
                          (or load-path nil))))
  ;; load up Org-mode and Org-babel
  (require 'org-install)
  (require 'ob-tangle))

;; load up all literate org-mode files in this directory
(mapc #'org-babel-load-file (directory-files dotfiles-dir t "\\.org$"))

;;; init.el ends here
#+end_src

If you're new to Emacs Lisp, you probably don't want to copy and paste large chunks of this code. Instead, copy small parts of it (always making sure to copy a complete set of parentheses) into your =*scratch*= buffer or some other buffer in =emacs-lisp-mode=. Use =M-x eval-buffer= to evaluate the code and see if you like the way that Emacs behaves. See [[https://www.gnu.org/software/emacs/manual/html_mono/eintr.html][An Introduction to Programming in Emacs Lisp]] for more details on Emacs Lisp. You can also find the manual by using =C-h i= (=info=) and choosing "Emacs Lisp Intro". 

I've installed a lot of packages. See the [[*Add%20package%20sources][package sources]] section to add the repositories to your configuration. When you see =use-package= and a package name you might like, you can use =M-x package-install= to install the package of that name. Note that use-package is itself provided by a package, so you'll probably want to install that and =bind-ke=.

If you're viewing the Org file, you can open source code blocks (those are the ones in begin_src) in a separate buffer by moving your point inside them and typing C-c ' (=org-edit-special=). This opens another buffer in =emacs-lisp-mode=, so you can use =M-x eval-buffer= to load the changes. If you want to explore how functions work, use =M-x edebug-defun= to set up debugging for that function, and then call it. You can learn more about edebug in the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Emacs Lisp]] manual.

I like using =(setq ...)= more than Customize because I can neatly organize my configuration that way. 

** Setup directories

*** Define vars
#+begin_src emacs-lisp
(defvar grc-emacs-init-file "~/.emacs.d/init.el")
(defvar grc-backups-folder "~/backups/")
(defvar grc-dropbox-folder "~/Dropbox/")
(defvar grc-emacs-config-dir
  (file-name-directory grc-emacs-init-file))
#+end_src

*** Set directories
#+begin_src emacs-lisp
(setq user-emacs-directory grc-emacs-config-dir)
(setq backup-directory-alist
      (list (cons "." (expand-file-name "emacs" grc-backups-folder))))
#+end_src

*** Set system specific directories
#+begin_src emacs-lisp
(setq custom-system-file (expand-file-name system-name grc-emacs-config-dir))
(setq custom-system-path (file-name-as-directory custom-system-file))
#+end_src

** Package management

*** Setup package management
    
#+begin_src emacs-lisp
(require 'cl)
(require 'package)
(dolist (repo '(("elpa"    . "http://tromey.com/elpa/")
                ("melpa"   . "http://melpa.milkbox.net/packages/")))
  (add-to-list 'package-archives repo))

(package-initialize)
#+end_src

*** Guarantee these packages are installed on start

#+begin_src emacs-lisp
(defvar packages-list
  '(evil evil-leader evil-numbers
   evil-matchit evil-nerd-commenter
   evil-exchange evil-visualstar
   evil-surround
   key-chord deft markdown-mode markdown-mode+
   ample-zen-theme subatomic256-theme
   color-theme-solarized
   magit multi-term
   flx flx-ido
   move-text
   http-post-simple eredis projectile
   helm
   helm-ag helm-css-scss helm-emmet helm-rails helm-rb
   helm-bm helm-dash helm-helm-commands helm-projectile
   helm-swoop helm-descbinds helm-dictionary
   heroku
   coffee-mode js3-mode slim-mode haml-mode feature-mode
   emmet-mode auto-complete
   yaml-mode
   ag ac-emmet ac-helm ac-ispell
   multiple-cursors
   php-mode ruby-mode
   xclip yasnippet
   ace-jump-mode ace-isearch ace-window
   guide-key
   smartparens
   bm scss-mode
   expand-region
   rainbow-mode
   fill-column-indicator
   clojure-mode
   handlebars-mode
   cursor-chg
   highlight-symbol
   rvm)
  "List of packages needs to be installed at launch")
#+end_src

*** Install packages if they are not already installed
    
#+begin_src emacs-lisp
(defun has-package-not-installed ()
  (loop for p in packages-list
        when (not (package-installed-p p)) do (return t)
        finally (return nil)))
(when (has-package-not-installed)
  ;; Check for new packages (package versions)
  (message "%s" "Get latest versions of all packages...")
  (package-refresh-contents)
  (message "%s" " done.")
  ;; Install the missing packages
  (dolist (p packages-list)
    (when (not (package-installed-p p))
      (package-install p))))
#+end_src

** Custom Functions

*** my custom functions
#+begin_src emacs-lisp
(defun scroll-down-in-place (n)
  (interactive "p")
  (previous-line n)
  (scroll-down n))
(defun scroll-up-in-place (n)
  (interactive "p")
  (next-line n)
  (scroll-up n))
#+end_src

** Configure Packages

*** flx-ido
#+begin_src emacs-lisp
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; (setq-default ido-ignore-buffers '(
;;                "^ "
;;                "*Completions*"
;;                "*Shell Command Output*"
;;                "*Messages*"
;;                "Async Shell Command"
;;                "*Compile-Log*"
;;                "*Customize"))

;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
#+end_src

*** projectile
#+begin_src emacs-lisp
(setq projectile-cache-file (concatenate 'string custom-system-path "projectile.cache"))
(setq projectile-known-projects-file (concatenate 'string custom-system-path "projectile-bookmarks.eld"))
(require 'projectile)
(projectile-global-mode)
(setq projectile-use-native-indexing t)
(setq projectile-enable-caching t)
(setq projectile-switch-project-action 'helm-projectile-find-file)
#+end_src

*** helm
#+begin_src emacs-lisp
(require 'helm-projectile)
(helm-projectile-on)
(require 'helm-config)

(require 'helm-descbinds)
(helm-descbinds-mode)

(require 'helm-dictionary)
#+end_src

*** magit
#+begin_src emacs-lisp
(require 'magit)
(global-set-key (kbd "C-c s") 'magit-status)
#+end_src

*** recentf
#+begin_src emacs-lisp
(require 'recentf)
(setq recentf-load-file (concatenate 'string custom-system-path "recentf"))
(setq recentf-save-file (concatenate 'string custom-system-path "recentf"))
(recentf-mode 1)
(setq recentf-max-menu-items 25)
#+end_src

*** smartparens
    Highlights matching pairs
#+begin_src emacs-lisp
(require 'smartparens-config)
(smartparens-global-mode t)
(show-smartparens-global-mode t)
#+end_src

*** guide-key
#+begin_src emacs-lisp
(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x" "C-c" "C-h"))
(setq guide-key/recursive-key-sequence-flag t)
(guide-key-mode 1)                           ; Enable guide-key-mode
(setq guide-key/highlight-command-regexp "rectangle")
#+end_src

*** auto-complete
#+begin_src emacs-lisp
(require 'auto-complete-config)
(setq ac-comphist-file (concatenate 'string custom-system-path "ac-comphist.dat"))
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
#+end_src

*** ace-isearch
#+begin_src emacs-lisp
(require 'ace-isearch)
#+end_src

*** ace-window
#+begin_src emacs-lisp
(require 'ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_src

*** evil-mode
#+begin_src emacs-lisp
(evil-mode t)
#+end_src
    
*** evil-surround
#+begin_src emacs-lisp
(require 'evil-surround)
#+end_src

*** evil-exchange
#+begin_src emacs-lisp
(require 'evil-exchange)
(setq evil-exchange-key (kbd "zx"))
(evil-exchange-install)
#+end_src

*** yasnippet
#+begin_src emacs-lisp
;; HAD TO MOVE THE NEXT 2 LINES INTO THE SYSTEM FILE FOR EACH SYSTEM
;;(require 'yasnippet)
;;(yas-global-mode 1)

(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"            ;; personal snippets
  ;;        "/path/to/some/collection/"      ;; just some foo-mode snippets
  ;;        "/path/to/some/othercollection/" ;; some more foo-mode and a complete baz-mode
        "~/.emacs.d/yasnippet-snippets"    ;; the default collection
        ))
#+end_src
    
*** rcodetools and xmpfilter
#+begin_src emacs-lisp
(require 'rcodetools)
(require 'ruby-mode)
(require 'ruby-mode-expansions)
#+end_src
    
*** saveplace
    Save place in file when I exit
#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (concatenate 'string custom-system-path "places"))
#+end_src

*** bm
    bookmarks
#+begin_src emacs-lisp
(setq bm-repository-file (concatenate 'string custom-system-path ".bm-repository"))
(setq-default bm-restore-repository-on-load t)
(require 'bm)
(setq-default bm-buffer-persistence t)       ; make bookmarks persistent as default

;; Loading the repository from file when on start up.
(add-hook' after-init-hook 'bm-repository-load)
 
;; Restoring bookmarks when on file find.
(add-hook 'find-file-hooks 'bm-buffer-restore)
 
;; Saving bookmark data on killing a buffer
(add-hook 'kill-buffer-hook 'bm-buffer-save)
 
;; Saving the repository to file when on exit.
;; kill-buffer-hook is not called when emacs is killed, so we
;; must save all bookmarks first.
(add-hook 'kill-emacs-hook '(lambda nil
                              (bm-buffer-save-all)
                              (bm-repository-save)))
#+end_src

*** deft
    Deft config for nvALT files with md extension 
#+begin_src emacs-lisp
(setq deft-extension "md")
(setq deft-directory (expand-file-name "MarkDown" grc-dropbox-folder))
(setq deft-text-mode 'markdown-mode)
(setq deft-use-filename-as-title 1)
#+end_src

*** move-text
#+begin_src emacs-lisp
(require 'move-text)
;;(move-text-default-bindings)
#+end_src

*** multi-term
#+begin_src emacs-lisp
(require 'multi-term)
#+end_src

*** multiple-cursors
#+begin_src emacs-lisp
(require 'multiple-cursors)
#+end_src

*** eredis
#+begin_src emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/elpa/eredis*")
(require 'eredis)
#+end_src

*** rainbow
#+begin_src emacs-lisp
(require 'rainbow-mode)
#+end_src
    
** Org Package

*** setup org directories
#+begin_src emacs-lisp
;; Set to the location of your Org files on your local system
(setq org-directory (expand-file-name "org" grc-dropbox-folder))

;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull (expand-file-name "flagged.org" org-directory))

;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory (expand-file-name "Apps/MobileOrg" grc-dropbox-folder))

;;(setq remember-data-file (expand-file-name "journal.org" org-directory))
(setq org-default-notes-file (expand-file-name "journal.org" org-directory))

;;(setq remember-annotation-functions '(org-remember-annotation))
;;(setq remember-handler-functions '(org-remember-handler))
;;(add-hook 'remember-mode-hook 'org-remember-apply-template)

'(org-refile-targets (quote (((expand-file-name "gtd.org" org-directory) :maxlevel . 1) 
           ((expand-file-name "someday.org" org-directory) :level . 2))))

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/org/gtd.org" "Tasks")
   ;;"* TODO %^{Brief Description} %^g\n%?\nAdded: %U")
   "* TODO %^{Brief Description} %^g\n  %?\n  %i\n  Added: %U")
        ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
   "* %?\nEntered on %U\n  %i\n  %a")))

;; (setq org-remember-templates
;;       '(("Todo" ?t "* TODO %^{Brief Description} %^g\n%?\nAdded: %U" "~/Dropbox/org/gtd.org" "Tasks")
;;  ("Journal"   ?j "** %^{Head Line} %U %^g\n%i%?"  "~/Dropbox/org/journal.org")
;;  ("Clipboard" ?c "** %^{Head Line} %U %^g\n%c\n%?"  "~/Dropbox/org/journal.org")
;;  ("Receipt"   ?r "** %^{BriefDesc} %U %^g\n%?"   "~/Dropbox/org/finances.org")
;;  ("Book" ?b "** %^{Book Title} %t :BOOK: \n%[~/Dropbox/org/.book_template.txt]\n" 
;;          "~/Dropbox/org/journal.org")
;;  ("Film" ?f "** %^{Film Title} %t :FILM: \n%[~/Dropbox/org/.film_template.txt]\n" 
;;          "~/Dropbox/org/journal.org")
;;  ("Daily Review" ?a "** %t :COACH: \n%[~/Dropbox/org/.daily_review.txt]\n" 
;;          "~/Dropbox/org/journal.org")
;;  ("Someday"   ?s "** %^{Someday Heading} %U\n%?\n"  "~/Dropbox/org/someday.org")
;;  ("Vocab"   ?v "** %^{Word?}\n%?\n"  "~/Dropbox/org/vocab.org")
;;  )
;;       )

(setq org-agenda-files (quote (
                               "~/Dropbox/org/birthday.org"
                               "~/Dropbox/org/gtd.org"
                               "~/Dropbox/org/emails.org"
                               "~/Dropbox/org/finances.org")))
#+end_src
    
** Hooks

*** deft mode hook
    Turn off evil-mode in a deft buffer
#+begin_src emacs-lisp
(defun gcman-deft-mode-hook ()
  "deft-mode-hook"
  (turn-off-evil-mode))
(add-hook 'deft-mode-hook '(lambda() (gcman-deft-mode-hook))) 
#+end_src

*** markdown-mode hook
    Stop markdown-mode interfeering with yasnippet
#+begin_src emacs-lisp
(defun gcman-markdown-mode-hook ()
  "markdown-mode-hook"
  (define-key markdown-mode-map (kbd "<tab>") nil))
(add-hook 'markdown-mode-hook '(lambda() (gcman-markdown-mode-hook)))
#+end_src

*** html-mode hook
#+begin_src emacs-lisp
(add-hook 'html-mode-hook 'turn-off-auto-fill)
#+end_src

*** org-mode hook
#+begin_src emacs-lisp
;;(add-hook 'org-mode 'org-src-fontify-buffer)
#+end_src

** Key bindings

*** global key bindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-c h") 'helm-projectile)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "<f9>") 'recentf-open-files)
(global-set-key (kbd "M-p") 'ace-window)
(global-set-key [f8] 'deft)
(global-set-key [S-f8] 'deft-new-file-named)
(global-set-key [C-return] 'emmet-expand-line)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map (kbd "<f2>") 'ispell-word)

;; set bookmarking keys
(global-set-key (kbd "<C-f7>") 'bm-next)
(global-set-key (kbd "<f7>")   'bm-toggle)
(global-set-key (kbd "<S-f7>") 'bm-previous)
(global-set-key (kbd "<M-f7>") 'bm-show-all)

;; set move-text block bubble keys
(global-set-key (kbd "<S-f6>") 'move-text-up)
(global-set-key (kbd "<C-f6>") 'move-text-down)

(global-set-key (kbd "C-c m") 'multi-term)

;; set multiple-cursors.el keys
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; set keys for text scaling
(global-set-key (kbd "C-x +") 'text-scale-increase)
(global-set-key (kbd "C-x _") 'text-scale-decrease)

(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C--") 'er/contract-region)

;; set keys for spliting window
(global-set-key (kbd "C-\\") 'split-window-below)
(global-set-key (kbd "C-|") 'split-window-right)

;; set org-mode global keys
(define-key global-map "\C-ct" 'org-capture)
(define-key global-map "\C-ca" 'org-agenda)

;; Unset Arrow keys, this should help force me to learn the Emacs keys!
;; (global-unset-key (kbd "<left>"))
;; (global-unset-key (kbd "<right>"))
;; (global-unset-key (kbd "<up>"))
;; (global-unset-key (kbd "<down>"))

;; set custom function keys
(global-set-key [M-up] 'scroll-down-in-place)
(global-set-key [M-down] 'scroll-up-in-place)
#+end_src
    
*** set mode specific keys

**** org-mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
    (lambda ()
      (local-unset-key "\C-c")
      (local-set-key "\C-cd" 'org-toodledo-mark-task-deleted)
      (local-set-key "\C-cs" 'org-toodledo-sync)
      )
    )
#+end_src

**** org-agenda-mode
#+begin_src emacs-lisp
(add-hook 'org-agenda-mode-hook
    (lambda ()
      (local-unset-key "\C-c")
      (local-set-key "\C-cd" 'org-toodledo-agenda-mark-task-deleted)
      )
    )
#+end_src

**** evil-mode
#+begin_src emacs-lisp
(evilnc-default-hotkeys)
#+end_src
     
***** evil-leader-mode
#+begin_src emacs-lisp
(global-evil-leader-mode)
(evil-leader/set-leader ",")
(evil-leader/set-key
  "f" 'helm-find-files
  "y" 'helm-show-kill-ring
  "o" 'helm-occur
  "v" 'helm-projectile
  "h" 'helm-man-woman
  "," 'helm-resume
  "." 'helm-calcul-expression
  "d" 'helm-descbinds
  "m" 'helm-mini
  "i" 'helm-semantic-or-imenu
  "p" 'ffap
  "j" 'ace-jump-mode
  "b" 'helm-buffers-list
  "k" 'kill-buffer)
#+end_src

***** evil-normal-state
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "+") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "-") 'evil-numbers/dec-at-pt)
#+end_src
      
***** evil-insert-state
#+begin_src emacs-lisp
;;Exit insert mode by pressing j and then j quickly
(setq key-chord-two-keys-delay 0.4)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-mode 1)
#+end_src
      
**** ruby-mode
#+begin_src emacs-lisp
(define-key ruby-mode-map (kbd "C-c C-c") 'xmp)
;;(add-hook 'ruby-mode-hook (lambda () (local-set-key "C-c C-c" 'xmp)))
#+end_src
     
** Global defaults
*** Sensible defaults
#+begin_src emacs-lisp
(global-evil-matchit-mode)
(global-ace-isearch-mode)
(global-auto-complete-mode)
(global-font-lock-mode)                      ; activate font-lock mode (syntax coloring)
(global-linum-mode)                          ; add line numbers on the left
(global-visual-line-mode)                    ; wrap long lines
(global-hl-line-mode)                        ; highlight current line
(setq-default linum-format "%7d ")
(setq-default rainbow-mode t)                ; highlight color codes
(setq-default scroll-bar-mode -1)            ; hide scroll bar
(setq-default org-src-fontify-natively t)    ; fontify code in code blocks

(setq inhibit-startup-screen t)
(setq max-specpdl-size 1800)
(show-paren-mode t)
#+end_src

*** Tabs and Indents
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
#+end_src

** Personal information
#+begin_src emacs-lisp
  (setq user-full-name "Gary Cheeseman"
        user-mail-address "gary@cheeseman.me.uk")
#+end_src

** System specific configuration

*** Apple Mac
    On OS X Emacs doesn't use the shell PATH if it's not started from the shell. If you're using homebrew modifying the PATH is essential. Also allow hash to be entered
#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (progn
      (push "/usr/local/bin" exec-path)
      (setq osx-pseudo-daemon-mode t)
      (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))))
#+end_src


**** 
* My old configuration
  *I will move stuff from here to the correct place above as needed*

#+begin_src emacs-lisp
(setq php-file-patterns (quote ("\\.php[s34]?\\'" "\\.phtml\\'" "\\.inc\\'" "\\.php\\'")))


;; Flymake
;; (require 'flymake)
;; (global-set-key [C-f3] 'flymake-display-err-menu-for-current-line)
;; (global-set-key [C-f4] 'flymake-goto-next-error)
;; (setq flymake-log-level 3)

;; Flycheck mode
;; Enable flymake for all files
;;(require 'flycheck)
;;(add-hook 'find-file-hook 'flycheck-mode)

;; Rake files are ruby, too, as are gemspecs, rackup files, etc.
(add-to-list 'auto-mode-alist '("\.rake$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\.gemspec$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\.ru$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Vagrantfile$" . ruby-mode))

;; SCSS options
(setq scss-compile-at-save nil)

;; setup if we are using a graphic display ----------------------------------
(if (display-graphic-p)
  (setq xterm-mouse-mode nil)
  (setq server-mode nil))

;; I like my cursor to blink and stretch
(setq blink-cursor-mode 1)
(setq x-stretch-cursor t)

;; show column numbers
(setq column-number-mode 1)

(let ((path-from-shell (shell-command-to-string "$SHELL -i -c 'echo $PATH'")))
  (setenv "PATH" path-from-shell)
  (setq exec-path (split-string path-from-shell path-separator)))



(setq evil-default-cursor 1)
(set-cursor-color "orange")



;; Turn off flyspell
(setq-default flyspell-mode nil)

;; if its not a mac, do these things
(unless (string-match "apple-darwin" system-configuration)
  ;; on mac, there's always a menu bar drown, don't have it empty
  (menu-bar-mode -1))

;; under mac, have Command as Meta and keep Option for localized input
(when (string-match "apple-darwin" system-configuration)
  (setq mac-allow-anti-aliasing t)
  (setq mac-option-key-is-meta nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (set-keyboard-coding-system nil)
  (setq mac-option-modifier nil)
  (menu-bar-mode t))

;; Use the clipboard, pretty please, so that copy/paste "works"
(setq x-select-enable-clipboard t)

;; Show keystrokes in progress
(setq echo-keystrokes 0.1)

;; Get current system's name
(defun insert-system-name()
  (interactive)
  "Get current system's name"
  (insert (format "%s" system-name))
  )

;; Get current system type
(defun insert-system-type()
  (interactive)
  "Get current system type"
  (insert (format "%s" system-type))
  )


;; key bindings
(when (eq system-type 'darwin)               ; mac specific settings
  (setq mac-option-modifier 'alt)
  (setq mac-command-modifier 'meta)
  (global-set-key [kp-delete] 'delete-char)  ; sets fn-delete to be right-delete
  )

;; garbage collection tuning
(setq gc-cons-threshold 20000000)


;; setup theme --------------------------------------------------------------
;; load theme depening on window type
(when (eq window-system 'x)
;;  (load-theme 'ample-zen t)
  (load-theme 'subatomic256 t)
  )
(when (eq window-system 'ns)
  (load-theme 'ample-zen t)
;;  (load-theme 'afternoon t)
  )
(when (eq window-system nil)
  (load-theme 'ample-zen t)
;;  (load-theme 'solarized-light t)
  (global-hl-line-mode)                      ; highlight current line
  (blink-cursor-mode)
  (setq x-stretch-cursor t)
;;  (load-theme 'subatomic256 t)
  )

;; Set up 'custom' emacs ----------------------------------------------------
(setq custom-file (expand-file-name "emacs-customizations.el" grc-emacs-config-dir))
(load custom-file)

;; Load 'custom' system file ------------------------------------------------
(load custom-system-file)

;;; init.el ends here
#+end_src
